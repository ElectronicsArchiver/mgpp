{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MGPP # MGPP is an unofficial gradle plugin for Mindustry modding. It provides lots of functionalities for you to develop a mod or plugin. Features # Manage the Dependencies Importing the dependencies of arc and Mindustry automatically with configuration. Download the Game Downloading any version of Mindustry easily. Debug your Mod Being able to debug your mod and Mindustry with an IDE, such as IntelliJ IDEA. Work with Other Mods Starting the game with your mod and others to test the compatibility or interaction. Separate Working Space The configurable data directory of Mindustry Client located in a temporary folder as default to separate the environments of your all projects. Manage your Assets Assets will be copied into the output jar file with configuration. Generate Resource Class A class with references of assets to reduce boilerplate codes. Deploy on Android Deploy your mod compatible to Mindustry on Android. [Android SDK Required] More Info # You can access the repository on GitHub to obtain more information. Also, there is a JavaDoc page for you to check up the API of mgpp. If you face any issue with mgpp, please contact us on Issue Report page. Join our Discord server to send us feedback or get help immediately. Welcome to contribute mgpp! My name? # MGPP means Mindustry Gradle Plugin, named Plumy (\u0e05\u055e\u2022 \u2022\u055e\u0e05)! by Liplum","title":"Overview"},{"location":"#welcome-to-mgpp","text":"MGPP is an unofficial gradle plugin for Mindustry modding. It provides lots of functionalities for you to develop a mod or plugin.","title":"Welcome to MGPP"},{"location":"#features","text":"Manage the Dependencies Importing the dependencies of arc and Mindustry automatically with configuration. Download the Game Downloading any version of Mindustry easily. Debug your Mod Being able to debug your mod and Mindustry with an IDE, such as IntelliJ IDEA. Work with Other Mods Starting the game with your mod and others to test the compatibility or interaction. Separate Working Space The configurable data directory of Mindustry Client located in a temporary folder as default to separate the environments of your all projects. Manage your Assets Assets will be copied into the output jar file with configuration. Generate Resource Class A class with references of assets to reduce boilerplate codes. Deploy on Android Deploy your mod compatible to Mindustry on Android. [Android SDK Required]","title":"Features"},{"location":"#more-info","text":"You can access the repository on GitHub to obtain more information. Also, there is a JavaDoc page for you to check up the API of mgpp. If you face any issue with mgpp, please contact us on Issue Report page. Join our Discord server to send us feedback or get help immediately. Welcome to contribute mgpp!","title":"More Info"},{"location":"#my-name","text":"MGPP means Mindustry Gradle Plugin, named Plumy (\u0e05\u055e\u2022 \u2022\u055e\u0e05)! by Liplum","title":"My name?"},{"location":"assets/generate-rclass/","text":"","title":"Generate rclass"},{"location":"assets/overview/","text":"Mindustry Assets # The mindustryAssets extension allows you to configure assets, including sprites , bundles , shaders , sounds and anything you want to add into your mod. Assume your project has this structure: YourMod/ \u251c\u2500 assets/ \u2502 \u251c\u2500 bundles/ \u2502 \u251c\u2500 sprites/ \u251c\u2500 src/ \u2502 \u251c\u2500 example/ \u2502 \u2502 \u251c\u2500 ExampleMod.java \u251c\u2500 build.gradle \u251c\u2500 gradle.properties Simple usage # Assets # In most cases, you can just simply copy all files recursively from the assets root folder into the jar task with this syntax: Groovy Kotlin mindustryAssets { rootAt \"$projectDir/assets\" } import io.github.liplum.mindustry.* mindustryAssets { root at \" $ projectDir /assets\" } Icon # MGPP will automatically search for it in order of the paths mentioned below: projectDir/icon.png rootDir/icon.png Also, you can configure it to any file/path your want. Groovy Kotlin mindustryAssets { iconAt \"$rootDir/icon.png\" } import io.github.liplum.mindustry.* mindustryAssets { icon at \" $ rootDir /icon.png\" } Advanced usage # MGPP provides AssetBatchType and AssetBatch for generating resource class, named R.java conventionally.","title":"Overview"},{"location":"assets/overview/#mindustry-assets","text":"The mindustryAssets extension allows you to configure assets, including sprites , bundles , shaders , sounds and anything you want to add into your mod. Assume your project has this structure: YourMod/ \u251c\u2500 assets/ \u2502 \u251c\u2500 bundles/ \u2502 \u251c\u2500 sprites/ \u251c\u2500 src/ \u2502 \u251c\u2500 example/ \u2502 \u2502 \u251c\u2500 ExampleMod.java \u251c\u2500 build.gradle \u251c\u2500 gradle.properties","title":"Mindustry Assets"},{"location":"assets/overview/#simple-usage","text":"","title":"Simple usage"},{"location":"assets/overview/#assets","text":"In most cases, you can just simply copy all files recursively from the assets root folder into the jar task with this syntax: Groovy Kotlin mindustryAssets { rootAt \"$projectDir/assets\" } import io.github.liplum.mindustry.* mindustryAssets { root at \" $ projectDir /assets\" }","title":"Assets"},{"location":"assets/overview/#icon","text":"MGPP will automatically search for it in order of the paths mentioned below: projectDir/icon.png rootDir/icon.png Also, you can configure it to any file/path your want. Groovy Kotlin mindustryAssets { iconAt \"$rootDir/icon.png\" } import io.github.liplum.mindustry.* mindustryAssets { icon at \" $ rootDir /icon.png\" }","title":"Icon"},{"location":"assets/overview/#advanced-usage","text":"MGPP provides AssetBatchType and AssetBatch for generating resource class, named R.java conventionally.","title":"Advanced usage"},{"location":"home/installation/","text":"Installation # MGPP was published on Gradle Plugin Portal . Please make sure to always upgrade MGPP to the latest version: Gradle setup # Using the plugins DSL : Groovy Kotlin plugins { id \"io.github.liplum.mgpp\" version \"<version>\" } plugins { id ( \"io.github.liplum.mgpp\" ) version \"<version>\" } Using legacy plugin application : Groovy Kotlin buildscript { repositories { maven { url \"https://plugins.gradle.org/m2/\" } } dependencies { classpath \"io.github.liplum.mgpp:MindustryGradlePluginPlumy:<version>\" } } apply plugin: \"io.github.liplum.mgpp\" buildscript { repositories { maven { url = uri ( \"https://plugins.gradle.org/m2/\" ) } } dependencies { classpath ( \"io.github.liplum.mgpp:MindustryGradlePluginPlumy:<version>\" ) } } apply ( plugin = \"io.github.liplum.mgpp\" ) Configuration # For ease of understanding, simplified examples are used here. Of course, it can still work for you. Groovy Kotlin mindustry { dependency { mindustry version: 'v135' arc version: 'v135' } client { official version: 'v135' } server { official version: 'v135' } } mindustryAssets { rootAt \"$projectDir/assets\" } import io.github.liplum.mindustry.* mindustry { dependency { mindustry on \"v135\" arc on \"v135\" } client { mindustry official \"v135\" } server { mindustry official \"v135\" } } mindustryAssets { root at \" $ projectDir /assets\" } Dependency setup # You can import the repositories where Mindustry was published by mindustryRepo() . You can use importMindustry() to import the Mindustry dependencies you have configured above. Groovy Kotlin repositories { mavenCentral () mindustryRepo () } dependencies { importMindustry () } import io.github.liplum.mindustry.* repositories { mavenCentral () mindustryRepo () } dependencies { importMindustry () }","title":"Installation"},{"location":"home/installation/#installation","text":"MGPP was published on Gradle Plugin Portal . Please make sure to always upgrade MGPP to the latest version:","title":"Installation"},{"location":"home/installation/#gradle-setup","text":"Using the plugins DSL : Groovy Kotlin plugins { id \"io.github.liplum.mgpp\" version \"<version>\" } plugins { id ( \"io.github.liplum.mgpp\" ) version \"<version>\" } Using legacy plugin application : Groovy Kotlin buildscript { repositories { maven { url \"https://plugins.gradle.org/m2/\" } } dependencies { classpath \"io.github.liplum.mgpp:MindustryGradlePluginPlumy:<version>\" } } apply plugin: \"io.github.liplum.mgpp\" buildscript { repositories { maven { url = uri ( \"https://plugins.gradle.org/m2/\" ) } } dependencies { classpath ( \"io.github.liplum.mgpp:MindustryGradlePluginPlumy:<version>\" ) } } apply ( plugin = \"io.github.liplum.mgpp\" )","title":"Gradle setup"},{"location":"home/installation/#configuration","text":"For ease of understanding, simplified examples are used here. Of course, it can still work for you. Groovy Kotlin mindustry { dependency { mindustry version: 'v135' arc version: 'v135' } client { official version: 'v135' } server { official version: 'v135' } } mindustryAssets { rootAt \"$projectDir/assets\" } import io.github.liplum.mindustry.* mindustry { dependency { mindustry on \"v135\" arc on \"v135\" } client { mindustry official \"v135\" } server { mindustry official \"v135\" } } mindustryAssets { root at \" $ projectDir /assets\" }","title":"Configuration"},{"location":"home/installation/#dependency-setup","text":"You can import the repositories where Mindustry was published by mindustryRepo() . You can use importMindustry() to import the Mindustry dependencies you have configured above. Groovy Kotlin repositories { mavenCentral () mindustryRepo () } dependencies { importMindustry () } import io.github.liplum.mindustry.* repositories { mavenCentral () mindustryRepo () } dependencies { importMindustry () }","title":"Dependency setup"},{"location":"home/samples/","text":"Samples # Templates # There is a template already initialized with mgpp for whom first time try mgpp. Samples # There are two official sample projects for testing purposes: Groovy Sample , Kotlin Sample , Multi-project Sample .","title":"Samples"},{"location":"home/samples/#samples","text":"","title":"Samples"},{"location":"home/samples/#templates","text":"There is a template already initialized with mgpp for whom first time try mgpp.","title":"Templates"},{"location":"home/samples/#samples_1","text":"There are two official sample projects for testing purposes: Groovy Sample , Kotlin Sample , Multi-project Sample .","title":"Samples"},{"location":"mindustry/client/","text":"Client # The client{} closure is inside of mindustry{} closure hereinafter. Related tasks: downloadClient , runClient NOTE: Client and Server configuration have almost the same syntax, so in these chapters, client/server are used, which indicates that syntax can work both sides. Please select the proper one. Game location # The game location is an abstract file, which represents the Mindustry game. You can rename the downloaded file with this clause, named . Groovy Kotlin client / server { official version: latest named 'LatestClient.jar' } client / server { mindustry official latest named \"LatestClient.jar\" } MGPP provides some simple clauses for downloading Mindustry: - official - be Official # To download the game from Mindustry official release . Groovy Kotlin client / server { official version: 'v136' } client / server { mindustry official \"v136\" } As default, mgpp will download v136 . Notations # latest: To download the latest official Mindustry from Mindustry official release , such as v135.2 . Groovy Kotlin client / server { official version: latest } client / server { mindustry official latest } Bleeding-edge # To download the bleeding-edge from Mindustry bleeding-edge release . Groovy Kotlin client / server { be version: '22853' } client / server { mindustry be \"22853\" } As default, mgpp will download a certain version to prevent errors when gradle configuring, but you shouldn't except this behavior. Notations # latest: To download the latest bleeding-edge Mindustry from Mindustry bleeding-edge release , such as 22826 . Groovy Kotlin client / server { be version: latest } client / server { be official latest } From local file # To copy the game file from a local file. Groovy Kotlin client /server { fromLocal 'E:/ Mindustry / myMindustry . jar ' } client / server { mindustry fromLocal ' E : / Mindustry / myMindustry . jar ' } From local properties # To copy the game file with its path from local.properties , you should declare the key-value pair in local.properties file first. For client : mgpp.client.location For server : mgpp.server.location TYPE: String mgpp.client.location = E:/Mindustry/client.jar mgpp.server.location = E:/Mindustry/server.jar Then let mgpp find it from local.properties file with the localProperties notation. Groovy Kotlin client / server { from localProperties } client / server { mindustry from localProperties } Foo's Client # To download the Foo's Client from AntiGrief release . NOTE: Since Foo's Client isn't an official client, mgpp doesn't guarantee the arguments below will properly work in your times. At lease, as of press date, it works. Therefore, you may have to configure it on your own if necessary. Groovy Kotlin client / server { from Foo ( version: 'v8.0.0' , release: 'erekir-client.jar' ) } client / server { mindustry from Foo ( version = \"v8.0.0\" , release = \"erekir-client.jar\" ) } version: The tag/version of which release you want to download. release: The name of file attached into the release. Keep other version # Whether to keep other versions when a new version is downloaded. keepOthers : To keep other versions when a new version is downloaded. clearUp : To clean all other versions when a new version is downloaded. Groovy Kotlin client / server { keepOthers clearUp } client / server { keepOthers clearUp } Startup args # The extra startup arguments for Mindustry game. Groovy Kotlin client / server { args += [ '-gl2' ] } client / server { args += listOf ( \"-gl2\" ) }","title":"Client"},{"location":"mindustry/client/#client","text":"The client{} closure is inside of mindustry{} closure hereinafter. Related tasks: downloadClient , runClient NOTE: Client and Server configuration have almost the same syntax, so in these chapters, client/server are used, which indicates that syntax can work both sides. Please select the proper one.","title":"Client"},{"location":"mindustry/client/#game-location","text":"The game location is an abstract file, which represents the Mindustry game. You can rename the downloaded file with this clause, named . Groovy Kotlin client / server { official version: latest named 'LatestClient.jar' } client / server { mindustry official latest named \"LatestClient.jar\" } MGPP provides some simple clauses for downloading Mindustry: - official - be","title":"Game location"},{"location":"mindustry/client/#official","text":"To download the game from Mindustry official release . Groovy Kotlin client / server { official version: 'v136' } client / server { mindustry official \"v136\" } As default, mgpp will download v136 .","title":"Official"},{"location":"mindustry/client/#notations","text":"latest: To download the latest official Mindustry from Mindustry official release , such as v135.2 . Groovy Kotlin client / server { official version: latest } client / server { mindustry official latest }","title":"Notations"},{"location":"mindustry/client/#bleeding-edge","text":"To download the bleeding-edge from Mindustry bleeding-edge release . Groovy Kotlin client / server { be version: '22853' } client / server { mindustry be \"22853\" } As default, mgpp will download a certain version to prevent errors when gradle configuring, but you shouldn't except this behavior.","title":"Bleeding-edge"},{"location":"mindustry/client/#notations_1","text":"latest: To download the latest bleeding-edge Mindustry from Mindustry bleeding-edge release , such as 22826 . Groovy Kotlin client / server { be version: latest } client / server { be official latest }","title":"Notations"},{"location":"mindustry/client/#from-local-file","text":"To copy the game file from a local file. Groovy Kotlin client /server { fromLocal 'E:/ Mindustry / myMindustry . jar ' } client / server { mindustry fromLocal ' E : / Mindustry / myMindustry . jar ' }","title":"From local file"},{"location":"mindustry/client/#from-local-properties","text":"To copy the game file with its path from local.properties , you should declare the key-value pair in local.properties file first. For client : mgpp.client.location For server : mgpp.server.location TYPE: String mgpp.client.location = E:/Mindustry/client.jar mgpp.server.location = E:/Mindustry/server.jar Then let mgpp find it from local.properties file with the localProperties notation. Groovy Kotlin client / server { from localProperties } client / server { mindustry from localProperties }","title":"From local properties"},{"location":"mindustry/client/#foos-client","text":"To download the Foo's Client from AntiGrief release . NOTE: Since Foo's Client isn't an official client, mgpp doesn't guarantee the arguments below will properly work in your times. At lease, as of press date, it works. Therefore, you may have to configure it on your own if necessary. Groovy Kotlin client / server { from Foo ( version: 'v8.0.0' , release: 'erekir-client.jar' ) } client / server { mindustry from Foo ( version = \"v8.0.0\" , release = \"erekir-client.jar\" ) } version: The tag/version of which release you want to download. release: The name of file attached into the release.","title":"Foo's Client"},{"location":"mindustry/client/#keep-other-version","text":"Whether to keep other versions when a new version is downloaded. keepOthers : To keep other versions when a new version is downloaded. clearUp : To clean all other versions when a new version is downloaded. Groovy Kotlin client / server { keepOthers clearUp } client / server { keepOthers clearUp }","title":"Keep other version"},{"location":"mindustry/client/#startup-args","text":"The extra startup arguments for Mindustry game. Groovy Kotlin client / server { args += [ '-gl2' ] } client / server { args += listOf ( \"-gl2\" ) }","title":"Startup args"},{"location":"mindustry/dependency/","text":"Dependency # Import # To apply the dependency configuration, you have to call importMindustry() when declaring dependency inside dependencies{} closure in your build.gradle[.kts] . Groovy Kotlin dependencies { importMindustry () } import io.github.liplum.mindustry.* dependencies { importMindustry () } MGPP provides dependency{} closure for you to configure which version you want to use, and it's inside of mindustry{} closure hereinafter. Arc dependency # You can specify the which Arc version to use with this syntax. Groovy Kotlin dependency { arc version: 'v135' // a released version // OR arc version: 'b1b88883e2' // a commit snapshot } dependency { arc on \"v135\" // a released version // OR arc on \"b1b88883e2\" // a commit snapshot } As default, mgpp will apply arc v135 . Notations # latest: To apply the latest commit of Arc, such as b1b88883e2 . NOTE: It might not work if you faced the API limit of GitHub or jitpack yet to build this version. latestTag: To apply the latest tag of Arc, such as v135.2 . NOTE: It has a very small chance that it won't work when the new version was just released. Groovy Kotlin dependency { arc version: latest arc version: latestTag } dependency { arc on latest arc on latestTag } Mindustry Dependency # You can specify the which Mindustry version to use with this syntax. mindustry : only supports released versions mirror : only supports commit snapshots Groovy Kotlin dependency { mindustry version: 'v135' // a released version of Mindustry // OR mindustryMirror version: '66595eb140' // a commit snapshot from mirror } dependency { mindustry on \"v135\" // a released version of Mindustry // OR mindustry mirror \"66595eb140\" // a commit snapshot from mirror } As default, mgpp will apply mindustry v135 . Notations # latest For mindustry : To apply the latest release of Mindustry, such as v135.2 . NOTE: It has a very small chance that it won't work when the new version was just released. For mirror : To apply the latest commit of Mindustry mirror, such as 66595eb140 . NOTE: It might not work if you faced the API limit of GitHub or jitpack yet to build this version. latestRelease: Only for mindustry : To apply the latest release of Mindustry, completely the same as mindustry latest , such as v135.2 . NOTE: It has a very small chance that it won't work when the new version was just released. Groovy Kotlin dependency { mindustry version: latest mindustry version: latestRelease mindustryMirror version: latest } dependency { mindustry on latest mindustry on latestRelease mindustry mirror latest }","title":"Dependency"},{"location":"mindustry/dependency/#dependency","text":"","title":"Dependency"},{"location":"mindustry/dependency/#import","text":"To apply the dependency configuration, you have to call importMindustry() when declaring dependency inside dependencies{} closure in your build.gradle[.kts] . Groovy Kotlin dependencies { importMindustry () } import io.github.liplum.mindustry.* dependencies { importMindustry () } MGPP provides dependency{} closure for you to configure which version you want to use, and it's inside of mindustry{} closure hereinafter.","title":"Import"},{"location":"mindustry/dependency/#arc-dependency","text":"You can specify the which Arc version to use with this syntax. Groovy Kotlin dependency { arc version: 'v135' // a released version // OR arc version: 'b1b88883e2' // a commit snapshot } dependency { arc on \"v135\" // a released version // OR arc on \"b1b88883e2\" // a commit snapshot } As default, mgpp will apply arc v135 .","title":"Arc dependency"},{"location":"mindustry/dependency/#notations","text":"latest: To apply the latest commit of Arc, such as b1b88883e2 . NOTE: It might not work if you faced the API limit of GitHub or jitpack yet to build this version. latestTag: To apply the latest tag of Arc, such as v135.2 . NOTE: It has a very small chance that it won't work when the new version was just released. Groovy Kotlin dependency { arc version: latest arc version: latestTag } dependency { arc on latest arc on latestTag }","title":"Notations"},{"location":"mindustry/dependency/#mindustry-dependency","text":"You can specify the which Mindustry version to use with this syntax. mindustry : only supports released versions mirror : only supports commit snapshots Groovy Kotlin dependency { mindustry version: 'v135' // a released version of Mindustry // OR mindustryMirror version: '66595eb140' // a commit snapshot from mirror } dependency { mindustry on \"v135\" // a released version of Mindustry // OR mindustry mirror \"66595eb140\" // a commit snapshot from mirror } As default, mgpp will apply mindustry v135 .","title":"Mindustry Dependency"},{"location":"mindustry/dependency/#notations_1","text":"latest For mindustry : To apply the latest release of Mindustry, such as v135.2 . NOTE: It has a very small chance that it won't work when the new version was just released. For mirror : To apply the latest commit of Mindustry mirror, such as 66595eb140 . NOTE: It might not work if you faced the API limit of GitHub or jitpack yet to build this version. latestRelease: Only for mindustry : To apply the latest release of Mindustry, completely the same as mindustry latest , such as v135.2 . NOTE: It has a very small chance that it won't work when the new version was just released. Groovy Kotlin dependency { mindustry version: latest mindustry version: latestRelease mindustryMirror version: latest } dependency { mindustry on latest mindustry on latestRelease mindustry mirror latest }","title":"Notations"},{"location":"mindustry/deploy/","text":"Deploy # MGPP provides two useful tasks for deployment on Android, dexJar and deploy , but they only work when java plugin is enabled. The deploy{} closure is inside of mindustry{} closure hereinafter. Related tasks: jar , dexJar , deploy Deployment Jar # The deploy task will output the deployment jar, which contains classes.dex and your stuffs Destination Directory # As default, deploy task outputs into its temporary directory, buildDir/tmp/deploy . You can customize its destination to fit your CI, vice versa. Name # The name of deployment jar is in the pattern of baseName-version-classifier.jar Default values: baseName: name in your mod meta version: version in your mod meta classifier: empty Groovy Kotlin deploy { baseName = 'ExampleMod' version = '1.0' classifer = '' } deploy { baseName = \"ExampleMod\" version = \"1.0\" classifer = \"\" } Enable fat jar # Whether to make a fat jar , which contains all dependencies from classpath, in the jar task. It's useful when you utilize other library or make a Kotlin mod. fatJar : To enable fat jar. noFatJar : To disable fat jar. Groovy Kotlin deploy { fatJar // OR noFatJar } deploy { fatJar // OR noFatJar } MGPP will apply fatJar as default, if you don't specify mgpp.deploy.enableFatJar in gradle.properties file. Default value from gradle properties # MGPP will read the default value from mgpp.deploy.enableFatJar in gradle.properties file. If not found, fatJar will be applied. TYPE: Boolean { true, false } mgpp.run.enableFatJar = false When you work on a multi-project, this may be useful. To obtain more information, please check the issue #13 Android SDK # You can configure the location of Android SDK, but mgpp doesn't recommend you to do that. MGPP will automatically search for Android SDK in order of the environment variables mentioned below: ANDROID_HOME ANDROID_SDK_ROOT Groovy Kotlin deploy { androidSdkRoot = 'D:/AnroidSDK' } deploy { androidSdkRoot = \"D:/AnroidSDK\" }","title":"Deploy"},{"location":"mindustry/deploy/#deploy","text":"MGPP provides two useful tasks for deployment on Android, dexJar and deploy , but they only work when java plugin is enabled. The deploy{} closure is inside of mindustry{} closure hereinafter. Related tasks: jar , dexJar , deploy","title":"Deploy"},{"location":"mindustry/deploy/#deployment-jar","text":"The deploy task will output the deployment jar, which contains classes.dex and your stuffs","title":"Deployment Jar"},{"location":"mindustry/deploy/#destination-directory","text":"As default, deploy task outputs into its temporary directory, buildDir/tmp/deploy . You can customize its destination to fit your CI, vice versa.","title":"Destination Directory"},{"location":"mindustry/deploy/#name","text":"The name of deployment jar is in the pattern of baseName-version-classifier.jar Default values: baseName: name in your mod meta version: version in your mod meta classifier: empty Groovy Kotlin deploy { baseName = 'ExampleMod' version = '1.0' classifer = '' } deploy { baseName = \"ExampleMod\" version = \"1.0\" classifer = \"\" }","title":"Name"},{"location":"mindustry/deploy/#enable-fat-jar","text":"Whether to make a fat jar , which contains all dependencies from classpath, in the jar task. It's useful when you utilize other library or make a Kotlin mod. fatJar : To enable fat jar. noFatJar : To disable fat jar. Groovy Kotlin deploy { fatJar // OR noFatJar } deploy { fatJar // OR noFatJar } MGPP will apply fatJar as default, if you don't specify mgpp.deploy.enableFatJar in gradle.properties file.","title":"Enable fat jar"},{"location":"mindustry/deploy/#default-value-from-gradle-properties","text":"MGPP will read the default value from mgpp.deploy.enableFatJar in gradle.properties file. If not found, fatJar will be applied. TYPE: Boolean { true, false } mgpp.run.enableFatJar = false When you work on a multi-project, this may be useful. To obtain more information, please check the issue #13","title":"Default value from gradle properties"},{"location":"mindustry/deploy/#android-sdk","text":"You can configure the location of Android SDK, but mgpp doesn't recommend you to do that. MGPP will automatically search for Android SDK in order of the environment variables mentioned below: ANDROID_HOME ANDROID_SDK_ROOT Groovy Kotlin deploy { androidSdkRoot = 'D:/AnroidSDK' } deploy { androidSdkRoot = \"D:/AnroidSDK\" }","title":"Android SDK"},{"location":"mindustry/mods/","text":"Mods # You can add more mods working with your mod, such as a Json or Java from GitHub, a local file, an url or even a gradle task. The mods{} closure is inside of mindustry{} closure hereinafter. Related tasks: resolveMods Extra mods from task # This list contains task paths whose outputs will be copied into dataDir/mods . Conventionally, when you apply java plugin, mgpp will add jar task into the list automatically. Groovy Kotlin mods { extraModsFromTask += [ ':js:distZip' ] } mods { extraModsFromTask += listOf ( \":js:distZip\" ) } Works with # The worksWith closure let you add more mods working with yours. Typed mods # MGPP will follow what Mindustry did to resolve those mods. Jvm Mod: mgpp will download it from its GitHub release page. JS/Json Mod: mgpp will download the zip of whole project on GitHub. Mod Type Expression Jvm Mod java, kotlin, groovy, scala, closure JS/Json Mod json, hjson, js As mgpp provided, you can use the syntax mentioned below to add a mod. Groovy Kotlin mods { worksWith { // pattern: expression + 'repo' java 'PlumyGame/mgpp' } } mods { worksWith { // pattern: add expression + 'repo' add java \"PlumyGame/mgpp\" } } For a Js/Json mod, you can specify its branch: Groovy Kotlin mods { worksWith { hjson 'PlumyGame/mgpp' branch 'v7' } } mods { worksWith { add hjson \"PlumyGame/mgpp\" branch \"v7\" } } Typeless mod # MGPP also allows to you add a mod without explicit type . URL mod # MGPP will download it into the temporary directory of resolveMods task (hereinafter referred to as temp ). Groovy Kotlin mods { worksWith { url 'https://example.org/ExapmleMod.jar' } } mods { worksWith { add url \"https://example.org/ExapmleMod.jar\" } } Local mod # MGPP will copy it from your local disk into temp local: the path specified here will be copied. localProperties: the value in local.properties file will be treated as a path for copying. There is no effect if the key doesn't exist. Groovy Kotlin mods { worksWith { local 'E:/mgpp/mod.jar' localProperties 'mods.what-mod-to-copy' } } mods { worksWith { add local \"E:/mgpp/mod.jar\" add localProperties \"mods.what-mod-to-copy\" } } General GitHub mod # MGPP will figure out the mod type the same as Mindustry does. Groovy Kotlin mods { worksWith { // In this case, it'll be treated as a Jvm mod github 'PlumyGame/mgpp' } } mods { worksWith { // In this case, it'll be treated as a Jvm mod add github \"PlumyGame/mgpp\" } } From Task # This way is almost the same as how you add an extra mods from task , but you may benefit from its simple syntax. Groovy Kotlin mods { worksWith { // pattern: fromTask 'task path' fromTask ':js:distZip' } } mods { worksWith { // pattern: add fromTask 'task path' add fromTask \":js:distZip\" } } Directly add # Anyway, if mgpp doesn't meet your need, you can also directly add a mod, which you can implement on your own IMod class , into worksWith set. Groovy Kotlin mods { worksWith { worksWith . add ( new YourModClass (...)) } } mods { worksWith { worksWith . add ( YourModClass (...)) } }","title":"Mods"},{"location":"mindustry/mods/#mods","text":"You can add more mods working with your mod, such as a Json or Java from GitHub, a local file, an url or even a gradle task. The mods{} closure is inside of mindustry{} closure hereinafter. Related tasks: resolveMods","title":"Mods"},{"location":"mindustry/mods/#extra-mods-from-task","text":"This list contains task paths whose outputs will be copied into dataDir/mods . Conventionally, when you apply java plugin, mgpp will add jar task into the list automatically. Groovy Kotlin mods { extraModsFromTask += [ ':js:distZip' ] } mods { extraModsFromTask += listOf ( \":js:distZip\" ) }","title":"Extra mods from task"},{"location":"mindustry/mods/#works-with","text":"The worksWith closure let you add more mods working with yours.","title":"Works with"},{"location":"mindustry/mods/#typed-mods","text":"MGPP will follow what Mindustry did to resolve those mods. Jvm Mod: mgpp will download it from its GitHub release page. JS/Json Mod: mgpp will download the zip of whole project on GitHub. Mod Type Expression Jvm Mod java, kotlin, groovy, scala, closure JS/Json Mod json, hjson, js As mgpp provided, you can use the syntax mentioned below to add a mod. Groovy Kotlin mods { worksWith { // pattern: expression + 'repo' java 'PlumyGame/mgpp' } } mods { worksWith { // pattern: add expression + 'repo' add java \"PlumyGame/mgpp\" } } For a Js/Json mod, you can specify its branch: Groovy Kotlin mods { worksWith { hjson 'PlumyGame/mgpp' branch 'v7' } } mods { worksWith { add hjson \"PlumyGame/mgpp\" branch \"v7\" } }","title":"Typed mods"},{"location":"mindustry/mods/#typeless-mod","text":"MGPP also allows to you add a mod without explicit type .","title":"Typeless mod"},{"location":"mindustry/mods/#url-mod","text":"MGPP will download it into the temporary directory of resolveMods task (hereinafter referred to as temp ). Groovy Kotlin mods { worksWith { url 'https://example.org/ExapmleMod.jar' } } mods { worksWith { add url \"https://example.org/ExapmleMod.jar\" } }","title":"URL mod"},{"location":"mindustry/mods/#local-mod","text":"MGPP will copy it from your local disk into temp local: the path specified here will be copied. localProperties: the value in local.properties file will be treated as a path for copying. There is no effect if the key doesn't exist. Groovy Kotlin mods { worksWith { local 'E:/mgpp/mod.jar' localProperties 'mods.what-mod-to-copy' } } mods { worksWith { add local \"E:/mgpp/mod.jar\" add localProperties \"mods.what-mod-to-copy\" } }","title":"Local mod"},{"location":"mindustry/mods/#general-github-mod","text":"MGPP will figure out the mod type the same as Mindustry does. Groovy Kotlin mods { worksWith { // In this case, it'll be treated as a Jvm mod github 'PlumyGame/mgpp' } } mods { worksWith { // In this case, it'll be treated as a Jvm mod add github \"PlumyGame/mgpp\" } }","title":"General GitHub mod"},{"location":"mindustry/mods/#from-task","text":"This way is almost the same as how you add an extra mods from task , but you may benefit from its simple syntax. Groovy Kotlin mods { worksWith { // pattern: fromTask 'task path' fromTask ':js:distZip' } } mods { worksWith { // pattern: add fromTask 'task path' add fromTask \":js:distZip\" } }","title":"From Task"},{"location":"mindustry/mods/#directly-add","text":"Anyway, if mgpp doesn't meet your need, you can also directly add a mod, which you can implement on your own IMod class , into worksWith set. Groovy Kotlin mods { worksWith { worksWith . add ( new YourModClass (...)) } } mods { worksWith { worksWith . add ( YourModClass (...)) } }","title":"Directly add"},{"location":"mindustry/overview/","text":"Mindustry Extension # The mindustry extension allows you to configure the mod.[h]json , dependency , run , deploy and so on. Configurations # It has separated all configurations as mentioned below. Dependency Client Server Mods Run Deploy Project type # MGPP supports 2 types of project: Mod , Plugin . Groovy Kotlin mindustry { projectType = Mod // OR projectType = Plugin } import io.github.liplum.mindustry.* mindustry { projectType = Mod // OR projectType = Plugin } It will affect the Dependency Resolution. Mod: Import all modules from Mindustry and Arc , including core , desktop and server . Plugin: Only import core and server module. Out of date time # It represents how much time the latest check will restart. Unit: second Groovy Kotlin mindustry { outOfDateTime = 60 * 60 // 60 minutes } mindustry { outOfDateTime = 60 * 60 // 60 minutes } Mod meta # It represents the mod.[h]json file of your mod. MGPP will automatically search for it in order of the paths mentioned below: projectDir/mod.hjson projectDir/mod.json rootDir/mod.hjson rootDir/mod.json Every key in the mod meta corresponds to every key in mod.[h]json file. You can append customized mod meta into the existed one, however, it only affects the output jar file. Thus, you could manipulate it internally in build script. Groovy Kotlin mindustry { meta << ModMeta ( name: 'test-name' , displayName: 'Test Display Name' , author: 'yourself' , description: '...' , subtitle: '...' , version: '1.0' , main: 'org.example.ExampleMod' , minGameVersion: '135' , repo: 'PlumyGame/mgpp' , dependencies: [ 'plumy/mgpp' ], hidden: false , java: true , keepOutline: false , ) } mindustry { meta += ModMeta ( name = \"test-name\" , displayName = \"Test Display Name\" , author = \"yourself\" , description = \"...\" , subtitle = \"...\" , version = \"1.0\" , main = \"org.example.ExampleMod\" , minGameVersion = \"135\" , repo = \"PlumyGame/mgpp\" , dependencies = listOf ( \"plumy/mgpp\" ), hidden = false , java = true , keepOutline = false , ) } Note: Some of them only exist in higher version of Mindustry.","title":"Overview"},{"location":"mindustry/overview/#mindustry-extension","text":"The mindustry extension allows you to configure the mod.[h]json , dependency , run , deploy and so on.","title":"Mindustry Extension"},{"location":"mindustry/overview/#configurations","text":"It has separated all configurations as mentioned below. Dependency Client Server Mods Run Deploy","title":"Configurations"},{"location":"mindustry/overview/#project-type","text":"MGPP supports 2 types of project: Mod , Plugin . Groovy Kotlin mindustry { projectType = Mod // OR projectType = Plugin } import io.github.liplum.mindustry.* mindustry { projectType = Mod // OR projectType = Plugin } It will affect the Dependency Resolution. Mod: Import all modules from Mindustry and Arc , including core , desktop and server . Plugin: Only import core and server module.","title":"Project type"},{"location":"mindustry/overview/#out-of-date-time","text":"It represents how much time the latest check will restart. Unit: second Groovy Kotlin mindustry { outOfDateTime = 60 * 60 // 60 minutes } mindustry { outOfDateTime = 60 * 60 // 60 minutes }","title":"Out of date time"},{"location":"mindustry/overview/#mod-meta","text":"It represents the mod.[h]json file of your mod. MGPP will automatically search for it in order of the paths mentioned below: projectDir/mod.hjson projectDir/mod.json rootDir/mod.hjson rootDir/mod.json Every key in the mod meta corresponds to every key in mod.[h]json file. You can append customized mod meta into the existed one, however, it only affects the output jar file. Thus, you could manipulate it internally in build script. Groovy Kotlin mindustry { meta << ModMeta ( name: 'test-name' , displayName: 'Test Display Name' , author: 'yourself' , description: '...' , subtitle: '...' , version: '1.0' , main: 'org.example.ExampleMod' , minGameVersion: '135' , repo: 'PlumyGame/mgpp' , dependencies: [ 'plumy/mgpp' ], hidden: false , java: true , keepOutline: false , ) } mindustry { meta += ModMeta ( name = \"test-name\" , displayName = \"Test Display Name\" , author = \"yourself\" , description = \"...\" , subtitle = \"...\" , version = \"1.0\" , main = \"org.example.ExampleMod\" , minGameVersion = \"135\" , repo = \"PlumyGame/mgpp\" , dependencies = listOf ( \"plumy/mgpp\" ), hidden = false , java = true , keepOutline = false , ) } Note: Some of them only exist in higher version of Mindustry.","title":"Mod meta"},{"location":"mindustry/run/","text":"Run # The run{} closure is inside of mindustry{} closure hereinafter. Related tasks: runClient , runServer Data Directory # Mindustry will store saves and settings in the data directory. Mindustry client will check an environment variable, MINDUSTRY_DATA_DIR , first. Default Data Directory # If the data directory is invalid or not yet set, Mindustry will create the default data directory: Linux Windows MacOS $HOME/.local/share/Mindustry/ %AppData%/Mindustry/ $HOME/Library/Application Support/Mindustry/ Customize Data Directory # MGPP allows you to customize the location of data directory: A path: MGPP will treat it as a directory. useDefaultDataDir: MGPP will set it to the default . useTempDataDir: MGPP will set it to the temporary directory of task: in case of runClient , it's buildDir/tmp/runClient/data in case of runServer , it's buildDir/tmp/runServer/data useEnvDataDir: MGPP will check the environment variable, MINDUSTRY_DATA_DIR . Groovy Kotlin run { dataDir = 'E:/MindustryData' useDefaultDataDir useTempDataDir useEnvDataDir } run { dataDir = ' E : / MindustryData ' useDefaultDataDir useTempDataDir useEnvDataDir } MGPP will apply the useTempDataDir as default. Overwrite from local properties # You can declare the mgpp.run.dataDir in local.properties file to overwrite the customized and default data directory mgpp.run.dataDir = default Forcibly Clear # Whether to delete all mods other than any from ModsSpec.worksWith in the data directory , ensure you have backed up your mods if it's on. clearOtherMods: To clear all things in the data directory . keepOtherMods: To keep anything in the data directory . Groovy Kotlin run { clearOtherMods // OR keepOtherMods } run { clearOtherMods // OR keepOtherMods } MGPP will apply the keepOtherMods as default. Overwrite from local properties # You can declare the mgpp.run.forciblyClear in local.properties file to overwrite this behavior. TYPE: Boolean { true, false } mgpp.run.forciblyClear = true","title":"Run"},{"location":"mindustry/run/#run","text":"The run{} closure is inside of mindustry{} closure hereinafter. Related tasks: runClient , runServer","title":"Run"},{"location":"mindustry/run/#data-directory","text":"Mindustry will store saves and settings in the data directory. Mindustry client will check an environment variable, MINDUSTRY_DATA_DIR , first.","title":"Data Directory"},{"location":"mindustry/run/#default-data-directory","text":"If the data directory is invalid or not yet set, Mindustry will create the default data directory: Linux Windows MacOS $HOME/.local/share/Mindustry/ %AppData%/Mindustry/ $HOME/Library/Application Support/Mindustry/","title":"Default Data Directory"},{"location":"mindustry/run/#customize-data-directory","text":"MGPP allows you to customize the location of data directory: A path: MGPP will treat it as a directory. useDefaultDataDir: MGPP will set it to the default . useTempDataDir: MGPP will set it to the temporary directory of task: in case of runClient , it's buildDir/tmp/runClient/data in case of runServer , it's buildDir/tmp/runServer/data useEnvDataDir: MGPP will check the environment variable, MINDUSTRY_DATA_DIR . Groovy Kotlin run { dataDir = 'E:/MindustryData' useDefaultDataDir useTempDataDir useEnvDataDir } run { dataDir = ' E : / MindustryData ' useDefaultDataDir useTempDataDir useEnvDataDir } MGPP will apply the useTempDataDir as default.","title":"Customize Data Directory"},{"location":"mindustry/run/#overwrite-from-local-properties","text":"You can declare the mgpp.run.dataDir in local.properties file to overwrite the customized and default data directory mgpp.run.dataDir = default","title":"Overwrite from local properties"},{"location":"mindustry/run/#forcibly-clear","text":"Whether to delete all mods other than any from ModsSpec.worksWith in the data directory , ensure you have backed up your mods if it's on. clearOtherMods: To clear all things in the data directory . keepOtherMods: To keep anything in the data directory . Groovy Kotlin run { clearOtherMods // OR keepOtherMods } run { clearOtherMods // OR keepOtherMods } MGPP will apply the keepOtherMods as default.","title":"Forcibly Clear"},{"location":"mindustry/run/#overwrite-from-local-properties_1","text":"You can declare the mgpp.run.forciblyClear in local.properties file to overwrite this behavior. TYPE: Boolean { true, false } mgpp.run.forciblyClear = true","title":"Overwrite from local properties"},{"location":"mindustry/server/","text":"Server # The server{} closure is inside of mindustry{} closure hereinafter. Related tasks: downloadServer , runServer NOTE: Client and Server configuration have almost the same syntax, so in these chapters, client/server are used, which indicates that syntax can work both sides. Please select the proper one. Game location # The game location is an abstract file, which represents the Mindustry game. You can rename the downloaded file with this clause, named . Groovy Kotlin client / server { official version: latest named 'LatestClient.jar' } client / server { mindustry official latest named \"LatestClient.jar\" } MGPP provides some simple clauses for downloading Mindustry: - official - be Official # To download the game from Mindustry official release . Groovy Kotlin client / server { official version: 'v136' } client / server { mindustry official \"v136\" } As default, mgpp will download v136 . Notations # latest: To download the latest official Mindustry from Mindustry official release , such as v135.2 . Groovy Kotlin client / server { official version: latest } client / server { mindustry official latest } Bleeding-edge # To download the bleeding-edge from Mindustry bleeding-edge release . Groovy Kotlin client / server { be version: '22853' } client / server { mindustry be \"22853\" } As default, mgpp will download a certain version to prevent errors when gradle configuring, but you shouldn't except this behavior. Notations # latest: To download the latest bleeding-edge Mindustry from Mindustry bleeding-edge release , such as 22826 . Groovy Kotlin client / server { be version: latest } client / server { be official latest } From local file # To copy the game file from a local file. Groovy Kotlin client /server { fromLocal 'E:/ Mindustry / myMindustry . jar ' } client / server { mindustry fromLocal ' E : / Mindustry / myMindustry . jar ' } From local properties # To copy the game file with its path from local.properties , you should declare the key-value pair in local.properties file first. For client : mgpp.client.location For server : mgpp.server.location TYPE: String mgpp.client.location = E:/Mindustry/client.jar mgpp.server.location = E:/Mindustry/server.jar Then let mgpp find it from local.properties file with the localProperties notation. Groovy Kotlin client / server { from localProperties } client / server { mindustry from localProperties } Keep other version # Whether to keep other versions when a new version is downloaded. keepOthers : To keep other versions when a new version is downloaded. clearUp : To clean all other versions when a new version is downloaded. Groovy Kotlin client / server { keepOthers clearUp } client / server { keepOthers clearUp } Startup args # The extra startup arguments for Mindustry game. Groovy Kotlin client / server { args += [ '-gl2' ] } client / server { args += listOf ( \"-gl2\" ) }","title":"Server"},{"location":"mindustry/server/#server","text":"The server{} closure is inside of mindustry{} closure hereinafter. Related tasks: downloadServer , runServer NOTE: Client and Server configuration have almost the same syntax, so in these chapters, client/server are used, which indicates that syntax can work both sides. Please select the proper one.","title":"Server"},{"location":"mindustry/server/#game-location","text":"The game location is an abstract file, which represents the Mindustry game. You can rename the downloaded file with this clause, named . Groovy Kotlin client / server { official version: latest named 'LatestClient.jar' } client / server { mindustry official latest named \"LatestClient.jar\" } MGPP provides some simple clauses for downloading Mindustry: - official - be","title":"Game location"},{"location":"mindustry/server/#official","text":"To download the game from Mindustry official release . Groovy Kotlin client / server { official version: 'v136' } client / server { mindustry official \"v136\" } As default, mgpp will download v136 .","title":"Official"},{"location":"mindustry/server/#notations","text":"latest: To download the latest official Mindustry from Mindustry official release , such as v135.2 . Groovy Kotlin client / server { official version: latest } client / server { mindustry official latest }","title":"Notations"},{"location":"mindustry/server/#bleeding-edge","text":"To download the bleeding-edge from Mindustry bleeding-edge release . Groovy Kotlin client / server { be version: '22853' } client / server { mindustry be \"22853\" } As default, mgpp will download a certain version to prevent errors when gradle configuring, but you shouldn't except this behavior.","title":"Bleeding-edge"},{"location":"mindustry/server/#notations_1","text":"latest: To download the latest bleeding-edge Mindustry from Mindustry bleeding-edge release , such as 22826 . Groovy Kotlin client / server { be version: latest } client / server { be official latest }","title":"Notations"},{"location":"mindustry/server/#from-local-file","text":"To copy the game file from a local file. Groovy Kotlin client /server { fromLocal 'E:/ Mindustry / myMindustry . jar ' } client / server { mindustry fromLocal ' E : / Mindustry / myMindustry . jar ' }","title":"From local file"},{"location":"mindustry/server/#from-local-properties","text":"To copy the game file with its path from local.properties , you should declare the key-value pair in local.properties file first. For client : mgpp.client.location For server : mgpp.server.location TYPE: String mgpp.client.location = E:/Mindustry/client.jar mgpp.server.location = E:/Mindustry/server.jar Then let mgpp find it from local.properties file with the localProperties notation. Groovy Kotlin client / server { from localProperties } client / server { mindustry from localProperties }","title":"From local properties"},{"location":"mindustry/server/#keep-other-version","text":"Whether to keep other versions when a new version is downloaded. keepOthers : To keep other versions when a new version is downloaded. clearUp : To clean all other versions when a new version is downloaded. Groovy Kotlin client / server { keepOthers clearUp } client / server { keepOthers clearUp }","title":"Keep other version"},{"location":"mindustry/server/#startup-args","text":"The extra startup arguments for Mindustry game. Groovy Kotlin client / server { args += [ '-gl2' ] } client / server { args += listOf ( \"-gl2\" ) }","title":"Startup args"},{"location":"mindustry/stuff/","text":"Notations # The notation always represents a term or works as a pronoun, such as latest , localProperties , latestRelease .","title":"Stuff"},{"location":"mindustry/stuff/#notations","text":"The notation always represents a term or works as a pronoun, such as latest , localProperties , latestRelease .","title":"Notations"},{"location":"task/overview/","text":"MGPP Tasks # MGPP provides many useful gradle tasks for building and debugging a mod. This instruction might not tell you how their classes work, but teach you how to configure those tasks. For more information about those tasks, please check the javaDoc . Debugging # Related tasks: downloadClient downloadServer runClient runServer resolveMods","title":"Overview"},{"location":"task/overview/#mgpp-tasks","text":"MGPP provides many useful gradle tasks for building and debugging a mod. This instruction might not tell you how their classes work, but teach you how to configure those tasks. For more information about those tasks, please check the javaDoc .","title":"MGPP Tasks"},{"location":"task/overview/#debugging","text":"Related tasks: downloadClient downloadServer runClient runServer resolveMods","title":"Debugging"},{"location":"task/task-downloadClient/","text":"downloadClient # Type # io.github.liplum.mindustry.task.Download","title":"downloadClient"},{"location":"task/task-downloadClient/#downloadclient","text":"","title":"downloadClient"},{"location":"task/task-downloadClient/#type","text":"io.github.liplum.mindustry.task.Download","title":"Type"},{"location":"task/task-downloadServer/","text":"downloadServer # Type # io.github.liplum.mindustry.task.Download","title":"downloadServer"},{"location":"task/task-downloadServer/#downloadserver","text":"","title":"downloadServer"},{"location":"task/task-downloadServer/#type","text":"io.github.liplum.mindustry.task.Download","title":"Type"},{"location":"task/task-resolveMods/","text":"resolveMods # Type # io.github.liplum.mindustry.task.ResolveMods","title":"resolveMods"},{"location":"task/task-resolveMods/#resolvemods","text":"","title":"resolveMods"},{"location":"task/task-resolveMods/#type","text":"io.github.liplum.mindustry.task.ResolveMods","title":"Type"},{"location":"task/task-runClient/","text":"runClient # Type # io.github.liplum.mindustry.task.RunMindustry","title":"runClient"},{"location":"task/task-runClient/#runclient","text":"","title":"runClient"},{"location":"task/task-runClient/#type","text":"io.github.liplum.mindustry.task.RunMindustry","title":"Type"},{"location":"task/task-runServer/","text":"runServer # Type # io.github.liplum.mindustry.task.RunMindustry Test #","title":"runServer"},{"location":"task/task-runServer/#runserver","text":"","title":"runServer"},{"location":"task/task-runServer/#type","text":"io.github.liplum.mindustry.task.RunMindustry","title":"Type"},{"location":"task/task-runServer/#test","text":"","title":"Test"}]}