buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url = uri('https://www.jitpack.io')
        }
    }
    dependencies {
        classpath(files('../main/build/libs/PlumyMindustryGradlePlugin-1.0.jar'))
    }
}
plugins {
    id 'java'
}
group 'plumy.test'
version '0.1'

apply plugin: plumy.mindustry.MindustryPlugin

repositories {
    use(plumy.mindustry.BuildScript) {
        mindustryRepo()
    }
    mavenCentral()
}
sourceSets {
    main {
        java.srcDirs('src')
        resources.srcDir('resources')
    }
    test {
        java.srcDir('test')
        resources.srcDir('resources')
    }
}
mindustry {
    dependency {
        useMirror version: 'd7312445a1'
        arc version: '123fbf12b9'
    }
    client {
        be version: '22714'
    }
    server {
        be version: '22714'
    }
    mods {
        worksWith {
            github 'liplum/cyberio'
        }
    }
    run {
        dataDir = 'temp'
    }
    assets {
        modMeta(
            name: 'test-plumy-mindustry-gradle-plugin-groovy',
            displayName: 'Test Plumy Mindustry Gradle Plugin Groovy',
            main: 'plumy.test.TestModGroovy',
            author: 'Liplum'
        )
        meta.version = "groovy 3000"
        meta.minGameVersion = "136"
    }
}

tasks.named('antiAlias') {
    sourceDirectory = new File(rootDir, 'textures')
    destinationDirectory = new File(rootDir, 'AA')
    addFilter {
        it.name != 'sender.png'
    }
    //options.isIncremental = false
}
/*
Because tasks, 'downloadClient/Sever' and 'runClient/Server', are registered after
the project evaluation, so you shouldn't use `tasks.named('foo')` to configure it.
As an alternative, you can use `tasks.withType(Class)` instead.
tasks.named('runClient') {
    dataOnTemporary()
}
*/
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    use(plumy.mindustry.BuildScript) {
        importMindustry()
    }
}

test {
    useJUnitPlatform()
}